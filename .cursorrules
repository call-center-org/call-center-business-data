# 📊 外呼数据系统 - AI 协作规则

## 🎛️ 通俗易懂沟通模式（默认开启）

### 🟢 当前模式：通俗易懂模式

除非用户明确要求关闭，否则**始终使用「通俗易懂模式」**。

### 📋 新对话开场白（强制）

每次新对话的第一条回复**必须包含**：

```
🟢 通俗易懂模式：已开启

我会用通俗的语言跟您交流。如果您想切换到专业模式，请说：「关闭通俗易懂模式」

---
```

### 🔄 模式切换

用户可随时说：
- "关闭通俗易懂模式" → 切换到专业模式
- "开启通俗易懂模式" → 切换回来

详细规则见：workspace 根目录的 `.cursorrules` 或 `ORGANIZATION_README.md`

---

## 🚨 新对话窗口必读

当你打开一个新的对话窗口时，**必须按以下顺序操作**：

### Step 1: 读取 Organization README（强制）

如果你在多项目工作区中，先读取：
- `/Users/tomnice/cursor/call-center-workspace/ORGANIZATION_README.md`

**为什么？** 因为本系统是 Call Center Organization 微服务架构中的一个子系统，你需要先了解整体架构。

### Step 2: 询问用户（强制）

如果 workspace 中有多个子系统，**必须主动询问**用户现在要开发哪个子系统。

❌ **不要假设**用户一定要开发本系统
✅ **必须等待**用户明确指定

### Step 3: 确认是外呼数据系统后

读取本 README：`README.md`

### Step 4: 向用户确认当前状态

```
我已经读取了外呼数据系统的文档。

本系统是一个已完成并部署的系统，主要功能：
- 从冠客平台获取外呼通话数据
- 统计近 N 天的数据（1/3/7/15/30天）
- 数据可视化展示

请问您需要：
1. 添加新功能？
2. 修复 Bug？
3. 优化现有功能？
```

---

## 📖 核心开发原则

### 1. 功能已稳定

本系统已完成基础功能并部署到生产环境：
- ✅ Token 认证管理
- ✅ 数据获取和统计
- ✅ 数据可视化

**新功能开发**：
- 需要用户明确说明需求
- 不要自己假设用户需要什么功能

### 2. API 集成

本系统集成了冠客 API，关键点：
- Token 有效期 30 天
- 自动刷新机制
- 本地缓存

修改 API 相关代码时要小心，确保不破坏现有机制。

### 3. 部署环境

- **平台**：腾讯云 CloudBase
- **地址**：https://cloud1-6gt5ulxm10210d0f.ap-shanghai.app.tcloudbase.com/data/

修改代码后确认是否需要重新部署。

---

## 🚫 AI 绝对禁止行为

1. ❌ **不要假设用户要开发本系统**（先询问）
2. ❌ **不要自己添加未经用户确认的新功能**
3. ❌ **不要破坏现有的 Token 认证机制**
4. ❌ **不要修改 API 调用逻辑除非用户明确要求**

---

## 📚 关键文件位置

| 文件 | 路径 | 说明 |
|------|------|------|
| README | `README.md` | 系统概览、功能列表、部署 |
| Organization README | `../ORGANIZATION_README.md` | 整体架构（在 workspace 根目录） |
| **MCP 配置文档** | `../call-center-docs/mcp-setup/` | **在线文档 MCP 配置指南** |
| Token 管理 | `src/utils/tokenManager.js` | Token 自动刷新逻辑 |
| API 客户端 | `src/utils/apiClient.js` | 冠客 API 调用封装 |

---

## ✅ 正确的对话开场

```
AI: 您好！我注意到这是外呼数据系统的仓库。

让我先读取 Organization README 了解整体架构...
[读取 ORGANIZATION_README.md]

然后读取本系统的文档...
[读取 README.md]

我看到本系统已完成并部署到生产环境，主要功能：
- 从冠客平台获取外呼数据
- 统计和可视化展示

请问您需要：
1. 添加新功能？
2. 修复 Bug？
3. 优化现有功能？
```

---

## 🎯 记住

1. 📖 先读 Organization README（如果在 workspace 中）
2. 📖 再读本系统的 README
3. 💬 向用户确认要做什么（不要假设）
4. 🚀 执行用户明确的需求
5. ⚠️ 小心 API 和 Token 机制，不要破坏现有功能

